{
  "address": "0x2E0998E0F9f2Afd631C08b349B95074DFac7b37E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_whitelistRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_freeClaimRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "live",
          "type": "bool"
        }
      ],
      "name": "FreeClaimActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Revenue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "live",
          "type": "bool"
        }
      ],
      "name": "SaleActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "live",
          "type": "bool"
        }
      ],
      "name": "WhitelistActive",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dutchAuctionConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseSize",
          "type": "uint256"
        },
        {
          "internalType": "uint248",
          "name": "numDecreases",
          "type": "uint248"
        },
        {
          "internalType": "enum LinearDutchAuction.AuctionIntervalUnit",
          "name": "unit",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFreeClaimActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "isOwnerOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "count",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "recipient",
          "type": "address[]"
        }
      ],
      "name": "massMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "purchaseFreeOfCharge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellerConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalInventory",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPerAddress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPerTx",
          "type": "uint256"
        },
        {
          "internalType": "uint248",
          "name": "freeQuota",
          "type": "uint248"
        },
        {
          "internalType": "bool",
          "name": "reserveFreeQuota",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "lockFreeQuota",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "lockTotalInventory",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decreaseInterval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decreaseSize",
              "type": "uint256"
            },
            {
              "internalType": "uint248",
              "name": "numDecreases",
              "type": "uint248"
            },
            {
              "internalType": "enum LinearDutchAuction.AuctionIntervalUnit",
              "name": "unit",
              "type": "uint8"
            }
          ],
          "internalType": "struct LinearDutchAuction.DutchAuctionConfig",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "expectedReserve",
          "type": "uint256"
        }
      ],
      "name": "setAuctionConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startPoint",
          "type": "uint256"
        }
      ],
      "name": "setAuctionStartPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        }
      ],
      "name": "setExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setFreeClaimRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalInventory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerAddress",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerTx",
              "type": "uint256"
            },
            {
              "internalType": "uint248",
              "name": "freeQuota",
              "type": "uint248"
            },
            {
              "internalType": "bool",
              "name": "reserveFreeQuota",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "lockFreeQuota",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "lockTotalInventory",
              "type": "bool"
            }
          ],
          "internalType": "struct Seller.SellerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setSellerConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        }
      ],
      "name": "setSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamWallet",
          "type": "address"
        }
      ],
      "name": "setTeamWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setWhitelistRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "teamMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleFreeClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "viewClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xed1b35d8479189687fa71b5f5de64e6d3cdd7e731072599c5a757dd4d694daac",
  "receipt": {
    "to": null,
    "from": "0x8Fa8D87C6A85bb94C8473f7E54f9e14d54DF5e2e",
    "contractAddress": "0x2E0998E0F9f2Afd631C08b349B95074DFac7b37E",
    "transactionIndex": 19,
    "gasUsed": "6028971",
    "logsBloom": "0x
    "blockHash": "0x2e83ecb4e805bfdb8110996c321fa9c8979d1fc2ae66be80300cde76ee026c06",
    "transactionHash": "0xed1b35d8479189687fa71b5f5de64e6d3cdd7e731072599c5a757dd4d694daac",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 11871797,
        "transactionHash": "0xed1b35d8479189687fa71b5f5de64e6d3cdd7e731072599c5a757dd4d694daac",
        "address": "0x2E0998E0F9f2Afd631C08b349B95074DFac7b37E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008fa8d87c6a85bb94c8473f7e54f9e14d54df5e2e"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x2e83ecb4e805bfdb8110996c321fa9c8979d1fc2ae66be80300cde76ee026c06"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 11871797,
        "transactionHash": "0xed1b35d8479189687fa71b5f5de64e6d3cdd7e731072599c5a757dd4d694daac",
        "address": "0x2E0998E0F9f2Afd631C08b349B95074DFac7b37E",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x00000000000000000000000006b9a0f17d8281ba7d6c0a862750f39d1281a1770000000000000000000000000000000000000000000000000000000000000014",
        "logIndex": 15,
        "blockHash": "0x2e83ecb4e805bfdb8110996c321fa9c8979d1fc2ae66be80300cde76ee026c06"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 11871797,
        "transactionHash": "0xed1b35d8479189687fa71b5f5de64e6d3cdd7e731072599c5a757dd4d694daac",
        "address": "0x2E0998E0F9f2Afd631C08b349B95074DFac7b37E",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000625ff9ce2d51ee66ffce890a455968cb39e7a4050000000000000000000000000000000000000000000000000000000000000050",
        "logIndex": 16,
        "blockHash": "0x2e83ecb4e805bfdb8110996c321fa9c8979d1fc2ae66be80300cde76ee026c06"
      }
    ],
    "blockNumber": 11871797,
    "cumulativeGasUsed": "6771796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb39ea31b5891d1ab6e73982471cfebbca36a3f4fd2434ab46e26e7d2e42fa205",
    "0xacbf5b2b551a07a0a73f63960e7e30f39399a6077b663674db70b971d5da1f8b",
    12000,
    1500
  ],
  "solcInputHash": "44b7af4deb85b1ab0b3900bd3b6b57ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_freeClaimRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"FreeClaimActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"SaleActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"WhitelistActive\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dutchAuctionConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseSize\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"numDecreases\",\"type\":\"uint248\"},{\"internalType\":\"enum LinearDutchAuction.AuctionIntervalUnit\",\"name\":\"unit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreeClaimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"count\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"}],\"name\":\"massMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"purchaseFreeOfCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"freeQuota\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"reserveFreeQuota\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockFreeQuota\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockTotalInventory\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseSize\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"numDecreases\",\"type\":\"uint248\"},{\"internalType\":\"enum LinearDutchAuction.AuctionIntervalUnit\",\"name\":\"unit\",\"type\":\"uint8\"}],\"internalType\":\"struct LinearDutchAuction.DutchAuctionConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expectedReserve\",\"type\":\"uint256\"}],\"name\":\"setAuctionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPoint\",\"type\":\"uint256\"}],\"name\":\"setAuctionStartPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setFreeClaimRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalInventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"freeQuota\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"reserveFreeQuota\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockFreeQuota\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockTotalInventory\",\"type\":\"bool\"}],\"internalType\":\"struct Seller.SellerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setSellerConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setWhitelistRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"teamMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleFreeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setAuctionConfig((uint256,uint256,uint256,uint256,uint248,uint8),uint256)\":{\"params\":{\"expectedReserve\":\"A safety check that the reserve, as calculated from the config, is as expected.\"}},\"setAuctionStartPoint(uint256)\":{\"details\":\"The auction can be toggle on and off with this function, without the cost of having to update the entire config.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Refund(address,uint256)\":{\"notice\":\"Emitted when a buyer is refunded.\"},\"Revenue(address,uint256,uint256)\":{\"notice\":\"Emitted on all purchases of non-zero amount.\"}},\"kind\":\"user\",\"methods\":{\"beneficiary()\":{\"notice\":\"Recipient of revenues.\"},\"buy()\":{\"notice\":\"LinearDutchAuction Required FunctionsEntry point for purchase of a single token.\"},\"cost(uint256)\":{\"notice\":\"Override of Seller.cost() with Dutch-auction logic.\"},\"dutchAuctionConfig()\":{\"notice\":\"Configuration of price changes.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"purchaseFreeOfCharge(address,uint256)\":{\"notice\":\"Allows the contract owner to purchase without payment, within the quota enforced by the SellerConfig.\"},\"sellerConfig()\":{\"notice\":\"Configuration of purchase limits.\"},\"setAuctionConfig((uint256,uint256,uint256,uint256,uint248,uint8),uint256)\":{\"notice\":\"Sets the auction config.\"},\"setAuctionStartPoint(uint256)\":{\"notice\":\"Sets the config startPoint. A startPoint of zero disables the auction.\"},\"setBeneficiary(address)\":{\"notice\":\"Sets the recipient of revenues.\"},\"setSellerConfig((uint256,uint256,uint256,uint248,bool,bool,bool))\":{\"notice\":\"Sets the seller config.\"},\"totalSold()\":{\"notice\":\"Returns the total number of items sold by this contract.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTcontract.sol\":\"NFTContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@divergencetech/ethier/contracts/sales/LinearDutchAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Seller.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @notice A Seller with a linearly decreasing price.\\nabstract contract LinearDutchAuction is Seller {\\n    /**\\n    @param unit The unit of \\\"time\\\" used for decreasing prices, block number or\\n    timestamp. NOTE: See the comment on AuctionIntervalUnit re use of Time as a\\n    unit.\\n    @param startPoint The block or timestamp at which the auction opens. A value\\n    of zero disables the auction. See setAuctionStartPoint().\\n    @param startPrice The price at `startPoint`.\\n    @param decreaseInterval The number of units to wait before decreasing the\\n    price. MUST be non-zero.\\n    @param decreaseSize The amount by which price decreases after every\\n    `decreaseInterval`.\\n    @param numDecreases The maximum number of price decreases before remaining\\n    constant. The reserve price is therefore implicit and equal to\\n    startPrice-numDecrease*decreaseSize.\\n     */\\n    struct DutchAuctionConfig {\\n        uint256 startPoint;\\n        uint256 startPrice;\\n        uint256 decreaseInterval;\\n        uint256 decreaseSize;\\n        // From https://docs.soliditylang.org/en/v0.8.10/types.html#enums \\\"Enums\\n        // cannot have more than 256 members\\\"; presumably they take 8 bits, so\\n        // use some of the numDecreases space instead.\\n        uint248 numDecreases;\\n        AuctionIntervalUnit unit;\\n    }\\n\\n    /**\\n    @notice The unit of \\\"time\\\" along which the cost decreases.\\n    @dev If no value is provided then the zero UNSPECIFIED will trigger an\\n    error.\\n\\n    NOTE: The Block unit is more reliable as it has an explicit progression\\n    (simply incrementing). Miners are allowed to have a time drift into the\\n    future although which predisposes to unexpected behaviour by which \\\"future\\\"\\n    costs are encountered. See the ConsenSys 15-second rule:\\n    https://consensys.net/blog/developers/solidity-best-practices-for-smart-contract-security/\\n     */\\n    enum AuctionIntervalUnit {\\n        UNSPECIFIED,\\n        Block,\\n        Time\\n    }\\n\\n    /// @param expectedReserve See setAuctionConfig().\\n    constructor(\\n        DutchAuctionConfig memory config,\\n        uint256 expectedReserve,\\n        Seller.SellerConfig memory sellerConfig,\\n        address payable _beneficiary\\n    ) Seller(sellerConfig, _beneficiary) {\\n        setAuctionConfig(config, expectedReserve);\\n    }\\n\\n    /// @notice Configuration of price changes.\\n    DutchAuctionConfig public dutchAuctionConfig;\\n\\n    /**\\n    @notice Sets the auction config.\\n    @param expectedReserve A safety check that the reserve, as calculated from\\n    the config, is as expected.\\n     */\\n    function setAuctionConfig(\\n        DutchAuctionConfig memory config,\\n        uint256 expectedReserve\\n    ) public onlyOwner {\\n        // Underflow might occur is size/num decreases is too large.\\n        unchecked {\\n            require(\\n                config.startPrice - config.decreaseSize * config.numDecreases ==\\n                    expectedReserve,\\n                \\\"LinearDutchAuction: incorrect reserve\\\"\\n            );\\n        }\\n        require(\\n            config.unit != AuctionIntervalUnit.UNSPECIFIED,\\n            \\\"LinearDutchAuction: unspecified unit\\\"\\n        );\\n        require(\\n            config.decreaseInterval > 0,\\n            \\\"LinearDutchAuction: zero decrease interval\\\"\\n        );\\n        dutchAuctionConfig = config;\\n    }\\n\\n    /**\\n    @notice Sets the config startPoint. A startPoint of zero disables the\\n    auction.\\n    @dev The auction can be toggle on and off with this function, without the\\n    cost of having to update the entire config.\\n     */\\n    function setAuctionStartPoint(uint256 startPoint) public onlyOwner {\\n        dutchAuctionConfig.startPoint = startPoint;\\n    }\\n\\n    /// @notice Override of Seller.cost() with Dutch-auction logic.\\n    function cost(uint256 n) public view override returns (uint256) {\\n        DutchAuctionConfig storage cfg = dutchAuctionConfig;\\n\\n        uint256 current;\\n        if (cfg.unit == AuctionIntervalUnit.Block) {\\n            current = block.number;\\n        } else if (cfg.unit == AuctionIntervalUnit.Time) {\\n            current = block.timestamp;\\n        }\\n\\n        require(\\n            cfg.startPoint != 0 && current >= cfg.startPoint,\\n            \\\"LinearDutchAuction: Not started\\\"\\n        );\\n\\n        uint256 decreases = Math.min(\\n            (current - cfg.startPoint) / cfg.decreaseInterval,\\n            cfg.numDecreases\\n        );\\n        return n * (cfg.startPrice - decreases * cfg.decreaseSize);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb3f2299df5e8ad81bce5c8ce18137acf3f001809e7644fb19173e3b7dccc5d\",\"license\":\"MIT\"},\"@divergencetech/ethier/contracts/sales/Seller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../utils/Monotonic.sol\\\";\\nimport \\\"../utils/OwnerPausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n@notice An abstract contract providing the _purchase() function to:\\n - Enforce per-wallet / per-transaction limits\\n - Calculate required cost, forwarding to a beneficiary, and refunding extra\\n */\\nabstract contract Seller is OwnerPausable, ReentrancyGuard {\\n    using Address for address payable;\\n    using Monotonic for Monotonic.Increaser;\\n    using Strings for uint256;\\n\\n    /**\\n    @dev Note that the address limits are vulnerable to wallet farming.\\n    @param maxPerAddress Unlimited if zero.\\n    @param maxPerTex Unlimited if zero.\\n    @param freeQuota Maximum number that can be purchased free of charge by\\n    the contract owner.\\n    @param reserveFreeQuota Whether to excplitly reserve the freeQuota amount\\n    and not let it be eroded by regular purchases.\\n    @param lockFreeQuota If true, calls to setSellerConfig() will ignore changes\\n    to freeQuota. Can be locked after initial setting, but not unlocked. This\\n    allows a contract owner to commit to a maximum number of reserved items.\\n    @param lockTotalInventory Similar to lockFreeQuota but applied to\\n    totalInventory.\\n    */\\n    struct SellerConfig {\\n        uint256 totalInventory;\\n        uint256 maxPerAddress;\\n        uint256 maxPerTx;\\n        uint248 freeQuota;\\n        bool reserveFreeQuota;\\n        bool lockFreeQuota;\\n        bool lockTotalInventory;\\n    }\\n\\n    constructor(SellerConfig memory config, address payable _beneficiary) {\\n        setSellerConfig(config);\\n        setBeneficiary(_beneficiary);\\n    }\\n\\n    /// @notice Configuration of purchase limits.\\n    SellerConfig public sellerConfig;\\n\\n    /// @notice Sets the seller config.\\n    function setSellerConfig(SellerConfig memory config) public onlyOwner {\\n        require(\\n            config.totalInventory >= config.freeQuota,\\n            \\\"Seller: excessive free quota\\\"\\n        );\\n        require(\\n            config.totalInventory >= _totalSold.current(),\\n            \\\"Seller: inventory < already sold\\\"\\n        );\\n        require(\\n            config.freeQuota >= purchasedFreeOfCharge.current(),\\n            \\\"Seller: free quota < already used\\\"\\n        );\\n\\n        // Overriding the in-memory fields before copying the whole struct, as\\n        // against writing individual fields, gives a greater guarantee of\\n        // correctness as the code is simpler to read.\\n        if (sellerConfig.lockTotalInventory) {\\n            config.lockTotalInventory = true;\\n            config.totalInventory = sellerConfig.totalInventory;\\n        }\\n        if (sellerConfig.lockFreeQuota) {\\n            config.lockFreeQuota = true;\\n            config.freeQuota = sellerConfig.freeQuota;\\n        }\\n        sellerConfig = config;\\n    }\\n\\n    /// @notice Recipient of revenues.\\n    address payable public beneficiary;\\n\\n    /// @notice Sets the recipient of revenues.\\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n    }\\n\\n    /**\\n    @dev Must return the current cost of a batch of items. This may be constant\\n    or, for example, decreasing for a Dutch auction or increasing for a bonding\\n    curve.\\n    @param n The number of items being purchased.\\n     */\\n    function cost(uint256 n) public view virtual returns (uint256);\\n\\n    /**\\n    @dev Called by both _purchase() and purchaseFreeOfCharge() after all limits\\n    have been put in place; must perform all contract-specific sale logic, e.g.\\n    ERC721 minting. When _handlePurchase() is called, the value returned by\\n    Seller.totalSold() will be the pre-purchase amount.\\n    @param to The recipient of the item(s).\\n    @param n The number of items allowed to be purchased, which MAY be less than\\n    to the number passed to _purchase() but SHALL be greater than zero.\\n    @param freeOfCharge Indicates that the call originated from\\n    purchaseFreeOfCharge() and not _purchase().\\n    */\\n    function _handlePurchase(\\n        address to,\\n        uint256 n,\\n        bool freeOfCharge\\n    ) internal virtual;\\n\\n    /**\\n    @notice Tracks total number of items sold by this contract, including those\\n    purchased free of charge by the contract owner.\\n     */\\n    Monotonic.Increaser private _totalSold;\\n\\n    /// @notice Returns the total number of items sold by this contract.\\n    function totalSold() public view returns (uint256) {\\n        return _totalSold.current();\\n    }\\n\\n    /**\\n    @notice Tracks the number of items already bought by an address, regardless\\n    of transferring out (in the case of ERC721).\\n    @dev This isn't public as it may be skewed due to differences in msg.sender\\n    and tx.origin, which it treats in the same way such that\\n    sum(_bought)>=totalSold().\\n     */\\n    mapping(address => uint256) private _bought;\\n\\n    /**\\n    @notice Returns min(n, max(extra items addr can purchase)) and reverts if 0.\\n    @param zeroMsg The message with which to revert on 0 extra.\\n     */\\n    function _capExtra(\\n        uint256 n,\\n        address addr,\\n        string memory zeroMsg\\n    ) internal view returns (uint256) {\\n        uint256 extra = sellerConfig.maxPerAddress - _bought[addr];\\n        if (extra == 0) {\\n            revert(string(abi.encodePacked(\\\"Seller: \\\", zeroMsg)));\\n        }\\n        return Math.min(n, extra);\\n    }\\n\\n    /// @notice Emitted when a buyer is refunded.\\n    event Refund(address indexed buyer, uint256 amount);\\n\\n    /// @notice Emitted on all purchases of non-zero amount.\\n    event Revenue(\\n        address indexed beneficiary,\\n        uint256 numPurchased,\\n        uint256 amount\\n    );\\n\\n    /// @notice Tracks number of items purchased free of charge.\\n    Monotonic.Increaser private purchasedFreeOfCharge;\\n\\n    /**\\n    @notice Allows the contract owner to purchase without payment, within the\\n    quota enforced by the SellerConfig.\\n     */\\n    function purchaseFreeOfCharge(address to, uint256 n)\\n        public\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        uint256 freeQuota = sellerConfig.freeQuota;\\n        n = Math.min(n, freeQuota - purchasedFreeOfCharge.current());\\n        require(n > 0, \\\"Seller: Free quota exceeded\\\");\\n\\n        uint256 totalInventory = sellerConfig.totalInventory;\\n        n = Math.min(n, totalInventory - _totalSold.current());\\n        require(n > 0, \\\"Seller: Sold out\\\");\\n\\n        _handlePurchase(to, n, true);\\n\\n        _totalSold.add(n);\\n        purchasedFreeOfCharge.add(n);\\n        assert(_totalSold.current() <= totalInventory);\\n        assert(purchasedFreeOfCharge.current() <= freeQuota);\\n    }\\n\\n    /**\\n    @notice Enforces all purchase limits (counts and costs) before calling\\n    _handlePurchase(), after which the received funds are disbursed to the\\n    beneficiary, less any required refunds.\\n    @param to The final recipient of the item(s).\\n    @param requested The number of items requested for purchase, which MAY be\\n    reduced when passed to _handlePurchase().\\n     */\\n    function _purchase(address to, uint256 requested)\\n        internal\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        /**\\n         * ##### CHECKS\\n         */\\n        SellerConfig memory config = sellerConfig;\\n\\n        uint256 n = config.maxPerTx == 0\\n            ? requested\\n            : Math.min(requested, config.maxPerTx);\\n\\n        uint256 maxAvailable;\\n        uint256 sold;\\n\\n        if (config.reserveFreeQuota) {\\n            maxAvailable = config.totalInventory - config.freeQuota;\\n            sold = _totalSold.current() - purchasedFreeOfCharge.current();\\n        } else {\\n            maxAvailable = config.totalInventory;\\n            sold = _totalSold.current();\\n        }\\n\\n        n = Math.min(n, maxAvailable - sold);\\n        require(n > 0, \\\"Seller: Sold out\\\");\\n\\n        if (config.maxPerAddress > 0) {\\n            bool alsoLimitSender = _msgSender() != to;\\n            bool alsoLimitOrigin = tx.origin != _msgSender() && tx.origin != to;\\n\\n            n = _capExtra(n, to, \\\"Buyer limit\\\");\\n            if (alsoLimitSender) {\\n                n = _capExtra(n, _msgSender(), \\\"Sender limit\\\");\\n            }\\n            if (alsoLimitOrigin) {\\n                n = _capExtra(n, tx.origin, \\\"Origin limit\\\");\\n            }\\n\\n            _bought[to] += n;\\n            if (alsoLimitSender) {\\n                _bought[_msgSender()] += n;\\n            }\\n            if (alsoLimitOrigin) {\\n                _bought[tx.origin] += n;\\n            }\\n        }\\n\\n        uint256 _cost = cost(n);\\n        if (msg.value < _cost) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Seller: Costs \\\",\\n                        (_cost / 1e9).toString(),\\n                        \\\" GWei\\\"\\n                    )\\n                )\\n            );\\n        }\\n\\n        /**\\n         * ##### EFFECTS\\n         */\\n\\n        _handlePurchase(to, n, false);\\n        _totalSold.add(n);\\n        assert(_totalSold.current() <= config.totalInventory);\\n\\n        /**\\n         * ##### INTERACTIONS\\n         */\\n\\n        // Ideally we'd be using a PullPayment here, but the user experience is\\n        // poor when there's a variable cost or the number of items purchased\\n        // has been capped. We've addressed reentrancy with both a nonReentrant\\n        // modifier and the checks, effects, interactions pattern.\\n\\n        if (_cost > 0) {\\n            beneficiary.sendValue(_cost);\\n            emit Revenue(beneficiary, n, _cost);\\n        }\\n\\n        if (msg.value > _cost) {\\n            address payable reimburse = payable(_msgSender());\\n            uint256 refund = msg.value - _cost;\\n\\n            // Using Address.sendValue() here would mask the revertMsg upon\\n            // reentrancy, but we want to expose it to allow for more precise\\n            // testing. This otherwise uses the exact same pattern as\\n            // Address.sendValue().\\n            (bool success, bytes memory returnData) = reimburse.call{\\n                value: refund\\n            }(\\\"\\\");\\n            // Although `returnData` will have a spurious prefix, all we really\\n            // care about is that it contains the ReentrancyGuard reversion\\n            // message so we can check in the tests.\\n            require(success, string(returnData));\\n\\n            emit Refund(reimburse, refund);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x787a0aface7b8fe98adafa3e589905fe4af3453755cc6f090ebd15289788dee3\",\"license\":\"MIT\"},\"@divergencetech/ethier/contracts/utils/Monotonic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n@notice Provides monotonic increasing and decreasing values, similar to\\nOpenZeppelin's Counter but (a) limited in direction, and (b) allowing for steps\\n> 1.\\n */\\nlibrary Monotonic {\\n    /**\\n    @notice Holds a value that can only increase.\\n    @dev The internal value MUST NOT be accessed directly. Instead use current()\\n    and add().\\n     */\\n    struct Increaser {\\n        uint256 value;\\n    }\\n\\n    /// @notice Returns the current value of the Increaser.\\n    function current(Increaser storage incr) internal view returns (uint256) {\\n        return incr.value;\\n    }\\n\\n    /// @notice Adds x to the Increaser's value.\\n    function add(Increaser storage incr, uint256 x) internal {\\n        incr.value += x;\\n    }\\n\\n    /**\\n    @notice Holds a value that can only decrease.\\n    @dev The internal value MUST NOT be accessed directly. Instead use current()\\n    and subtract().\\n     */\\n    struct Decreaser {\\n        uint256 value;\\n    }\\n\\n    /// @notice Returns the current value of the Decreaser.\\n    function current(Decreaser storage decr) internal view returns (uint256) {\\n        return decr.value;\\n    }\\n\\n    /// @notice Subtracts x from the Decreaser's value.\\n    function subtract(Decreaser storage decr, uint256 x) internal {\\n        decr.value -= x;\\n    }\\n}\\n\",\"keccak256\":\"0xd1f466ba9d508371ff6313e2f73b8ef37a844eb278f79ea8a47f02cc7c1c4eeb\",\"license\":\"MIT\"},\"@divergencetech/ethier/contracts/utils/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @notice A Pausable contract that can only be toggled by the Owner.\\ncontract OwnerPausable is Ownable, Pausable {\\n    /// @notice Pauses the contract.\\n    function pause() public onlyOwner {\\n        Pausable._pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    function unpause() public onlyOwner {\\n        Pausable._unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x1f1a2b19fde23759933f98fdce6d32dd4f3e5af03e4662b75331dbe6e38bf7ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0x2a87bad9bc75d65820b12f3cac5f4075a8fc632cd1aa5b740262834415492433\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"contracts/NFTcontract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@divergencetech/ethier/contracts/sales/LinearDutchAuction.sol\\\";\\r\\n\\r\\nimport \\\"./utils/BaseERC721.sol\\\";\\r\\nimport \\\"./utils/Merkle.sol\\\";\\r\\n\\r\\ncontract NFTContract is\\r\\n    ReentrancyGuard,\\r\\n    BaseERC721,\\r\\n    Merkle,\\r\\n    LinearDutchAuction\\r\\n{\\r\\n    bool public isFreeClaimActive;\\r\\n    mapping(address => uint256) internal whitelistCount;\\r\\n    bool public isWhitelistActive;\\r\\n    mapping(address => uint256) public totalClaimed;\\r\\n\\r\\n    event Claimed(uint256 count, address sender);\\r\\n    event WhitelistActive(bool live);\\r\\n    event FreeClaimActive(bool live);\\r\\n\\r\\n    constructor(\\r\\n        bytes32 _whitelistRoot,\\r\\n        bytes32 _freeClaimRoot,\\r\\n        uint256 _supply,\\r\\n        uint256 _max\\r\\n    )\\r\\n        Merkle(_whitelistRoot, _freeClaimRoot)\\r\\n        BaseERC721(\\r\\n            _supply,\\r\\n            _max,\\r\\n            0.07 ether,\\r\\n            \\\"https://ipfs.io/ipfs/QmeHzogTxMk27xDARdPJfQMqNF1xyUt4oECNSrCQfpwCH8/\\\",\\r\\n            \\\"NFTContract\\\",\\r\\n            \\\"NFTC\\\"\\r\\n        )\\r\\n        LinearDutchAuction(\\r\\n            LinearDutchAuction.DutchAuctionConfig({\\r\\n                startPoint: 0, // disabled at deployment\\r\\n                startPrice: 1.5 ether,\\r\\n                unit: AuctionIntervalUnit.Time,\\r\\n                decreaseInterval: 600, // 10 minutes\\r\\n                decreaseSize: 0.05 ether,\\r\\n                numDecreases: 27\\r\\n            }),\\r\\n            0.15 ether,\\r\\n            Seller.SellerConfig({\\r\\n                totalInventory: 5200,\\r\\n                lockTotalInventory: true,\\r\\n                maxPerAddress: 1,\\r\\n                maxPerTx: 1,\\r\\n                freeQuota: 0,\\r\\n                lockFreeQuota: true,\\r\\n                reserveFreeQuota: true\\r\\n            }),\\r\\n            beneficiary\\r\\n        )\\r\\n    {}\\r\\n\\r\\n    function claim(uint256 count, bytes32[] calldata proof)\\r\\n        external\\r\\n        payable\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(isFreeClaimActive, \\\"Not Live\\\");\\r\\n        require(_claimVerify(_claimLeaf(msg.sender, count), proof), \\\"Invalid\\\");\\r\\n        require(totalClaimed[msg.sender] != count, \\\"Already claimed\\\");\\r\\n\\r\\n        uint256 current = totalSupply();\\r\\n        require(current + count <= supply, \\\"Sold out\\\");\\r\\n        _safeMint(msg.sender, count);\\r\\n        totalClaimed[msg.sender] += count;\\r\\n        emit Claimed(count, msg.sender);\\r\\n    }\\r\\n\\r\\n    function whitelistMint(\\r\\n        uint256 count,\\r\\n        /*uint256 tokenId,*/\\r\\n        bytes32[] calldata proof\\r\\n    ) external payable nonReentrant {\\r\\n        require(isWhitelistActive, \\\"Not Live\\\");\\r\\n        require(\\r\\n            _whitelistVerify(\\r\\n                _whitelistLeaf(\\r\\n                    msg.sender /*, tokenId*/\\r\\n                ),\\r\\n                proof\\r\\n            ),\\r\\n            \\\"Invalid\\\"\\r\\n        );\\r\\n        require(whitelistCount[msg.sender] + count <= max, \\\"Max Mint\\\");\\r\\n        _callMint(count);\\r\\n        whitelistCount[msg.sender] += count;\\r\\n    }\\r\\n\\r\\n    function massMint(uint256[] memory count, address[] memory recipient)\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(count.length <= 50, \\\"List too big\\\");\\r\\n        require(count.length == recipient.length, \\\"Incorrect parameters\\\");\\r\\n        uint256 current = totalSupply();\\r\\n        uint256 countTotal;\\r\\n\\r\\n        for (uint256 i; i < count.length; i++) {\\r\\n            countTotal += count[i];\\r\\n        }\\r\\n\\r\\n        require(current + countTotal <= supply, \\\"Not enough Mints available\\\");\\r\\n        for (uint256 j; j < count.length; j++) {\\r\\n            _safeMint(recipient[j], count[j]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function viewClaimed(address account) external view returns (uint256) {\\r\\n        return totalClaimed[account];\\r\\n    }\\r\\n\\r\\n    function toggleWhitelist() external onlyOwner {\\r\\n        isWhitelistActive = !isWhitelistActive;\\r\\n        emit WhitelistActive(isWhitelistActive);\\r\\n    }\\r\\n\\r\\n    function toggleFreeClaim() external onlyOwner {\\r\\n        isFreeClaimActive = !isFreeClaimActive;\\r\\n        emit FreeClaimActive(isFreeClaimActive);\\r\\n    }\\r\\n\\r\\n    /// LinearDutchAuction Required Functions\\r\\n    /// @notice Entry point for purchase of a single token.\\r\\n    function buy() external payable {\\r\\n        Seller._purchase(msg.sender, 1);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal override of Seller function for handling purchase (i.e. minting).\\r\\n    function _handlePurchase(\\r\\n        address to,\\r\\n        uint256 num,\\r\\n        bool\\r\\n    ) internal override {\\r\\n        _safeMint(to, num);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x377c52c8689d5ffb1b750a396dbec157ef94850dd4fdbb43180fdadef90778ac\",\"license\":\"Unlicense\"},\"contracts/utils/BaseERC721.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\n\\r\\ncontract BaseERC721 is ERC721A, Ownable, ReentrancyGuard, PaymentSplitter {\\r\\n    using Strings for uint256;\\r\\n    string public baseUri;\\r\\n    address private teamWallet = 0x625Ff9Ce2d51Ee66FfCe890a455968CB39e7A405;\\r\\n    uint256 public supply;\\r\\n    uint256 public max;\\r\\n    string private extension = \\\".json\\\";\\r\\n    uint256 private startingIndex;\\r\\n    uint256 public price;\\r\\n    bool public isSaleActive;\\r\\n    address[] _addresses = [\\r\\n        // dev wallet\\r\\n        0x06b9A0F17d8281Ba7D6c0A862750f39d1281a177,\\r\\n        // owner wallet\\r\\n        teamWallet\\r\\n    ];\\r\\n    uint256[] _shares = [20, 80];\\r\\n    mapping(address => uint256) private mintCount;\\r\\n    event SaleActive(bool live);\\r\\n\\r\\n    constructor(\\r\\n        uint256 _supply,\\r\\n        uint256 _max,\\r\\n        uint256 _price,\\r\\n        string memory _baseUri,\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) ERC721A(name, symbol, 10000) PaymentSplitter(_addresses, _shares) {\\r\\n        supply = _supply;\\r\\n        max = _max;\\r\\n        price = _price;\\r\\n        baseUri = _baseUri;\\r\\n    }\\r\\n\\r\\n    function setExtension(string memory _extension) external onlyOwner {\\r\\n        extension = _extension;\\r\\n    }\\r\\n\\r\\n    function setUri(string memory _uri) external onlyOwner {\\r\\n        baseUri = _uri;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 _price) external onlyOwner {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function setMax(uint256 _max) external onlyOwner {\\r\\n        max = _max;\\r\\n    }\\r\\n\\r\\n    // function burn(uint256 tokenId) public {\\r\\n    //     require(\\r\\n    //         _isApprovedOrOwner(msg.sender, tokenId),\\r\\n    //         \\\"caller is not owner nor approved\\\"\\r\\n    //     );\\r\\n    //     _burn(tokenId);\\r\\n    // }\\r\\n\\r\\n    function setSupply(uint256 _supply) external onlyOwner {\\r\\n        supply = _supply;\\r\\n    }\\r\\n\\r\\n    modifier onlyTeam() {\\r\\n        require(msg.sender == teamWallet, \\\"Only team\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function teamMint(uint256 count) external nonReentrant onlyTeam {\\r\\n        _callMint(count);\\r\\n    }\\r\\n\\r\\n    function setTeamWallet(address _teamWallet) external onlyOwner {\\r\\n        teamWallet = _teamWallet;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 count) external payable nonReentrant {\\r\\n        require(isSaleActive, \\\"Not Live\\\");\\r\\n        _callMint(count);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: Nonexistent token\\\");\\r\\n        string memory currentBaseURI = baseUri;\\r\\n        return\\r\\n            bytes(currentBaseURI).length > 0\\r\\n                ? string(\\r\\n                    abi.encodePacked(\\r\\n                        currentBaseURI,\\r\\n                        tokenId.toString(),\\r\\n                        extension\\r\\n                    )\\r\\n                )\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function _callMint(uint256 count) internal {\\r\\n        uint256 total = totalSupply();\\r\\n        require(count > 0, \\\"Count is 0\\\");\\r\\n        require(total + count <= supply, \\\"Sold out\\\");\\r\\n        if (msg.sender != teamWallet) {\\r\\n            require(price * count == msg.value, \\\"Incorrect Eth\\\");\\r\\n            require(mintCount[msg.sender] + count <= max, \\\"Max Mint\\\");\\r\\n        }\\r\\n        _safeMint(msg.sender, count);\\r\\n        mintCount[msg.sender] += count;\\r\\n        delete total;\\r\\n    }\\r\\n\\r\\n    function togglePublicSale() external onlyOwner {\\r\\n        isSaleActive = !isSaleActive;\\r\\n        emit SaleActive(isSaleActive);\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        (bool success, ) = payable(teamWallet).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcbb6f2b420ff1e8a30c8b4909bba4633617f1a24da342a0709c2b956803aa78e\",\"license\":\"Unlicense\"},\"contracts/utils/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n    Context,\\r\\n    ERC165,\\r\\n    IERC721,\\r\\n    IERC721Metadata,\\r\\n    IERC721Enumerable\\r\\n{\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        address addr;\\r\\n        uint64 startTimestamp;\\r\\n    }\\r\\n\\r\\n    struct AddressData {\\r\\n        uint128 balance;\\r\\n        uint128 numberMinted;\\r\\n    }\\r\\n\\r\\n    uint256 private currentIndex = 0;\\r\\n\\r\\n    uint256 internal immutable maxBatchSize;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n    mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n    // Mapping owner address to address data\\r\\n    mapping(address => AddressData) private _addressData;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev\\r\\n     * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 maxBatchSize_\\r\\n    ) {\\r\\n        require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        maxBatchSize = maxBatchSize_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\r\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n        uint256 numMintedSoFar = totalSupply();\\r\\n        uint256 tokenIdsIdx = 0;\\r\\n        address currOwnershipAddr = address(0);\\r\\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\\r\\n            TokenOwnership memory ownership = _ownerships[i];\\r\\n            if (ownership.addr != address(0)) {\\r\\n                currOwnershipAddr = ownership.addr;\\r\\n            }\\r\\n            if (currOwnershipAddr == owner) {\\r\\n                if (tokenIdsIdx == index) {\\r\\n                    return i;\\r\\n                }\\r\\n                tokenIdsIdx++;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"ERC721A: balance query for the zero address\\\"\\r\\n        );\\r\\n        return uint256(_addressData[owner].balance);\\r\\n    }\\r\\n\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"ERC721A: number minted query for the zero address\\\"\\r\\n        );\\r\\n        return uint256(_addressData[owner].numberMinted);\\r\\n    }\\r\\n\\r\\n    function ownershipOf(uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n        uint256 lowestTokenToCheck;\\r\\n        if (tokenId >= maxBatchSize) {\\r\\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n        }\\r\\n\\r\\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n            TokenOwnership memory ownership = _ownerships[curr];\\r\\n            if (ownership.addr != address(0)) {\\r\\n                return ownership;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return ownershipOf(tokenId).addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = ERC721A.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721A: approved query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        override\\r\\n    {\\r\\n        require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, _data),\\r\\n            \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return tokenId < currentIndex;\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` cannot be larger than the max batch size.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        uint256 startTokenId = currentIndex;\\r\\n        require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n        require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n        require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        AddressData memory addressData = _addressData[to];\\r\\n        _addressData[to] = AddressData(\\r\\n            addressData.balance + uint128(quantity),\\r\\n            addressData.numberMinted + uint128(quantity)\\r\\n        );\\r\\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n        uint256 updatedIndex = startTokenId;\\r\\n\\r\\n        for (uint256 i = 0; i < quantity; i++) {\\r\\n            emit Transfer(address(0), to, updatedIndex);\\r\\n            require(\\r\\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n                \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n            );\\r\\n            updatedIndex++;\\r\\n        }\\r\\n\\r\\n        currentIndex = updatedIndex;\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n            getApproved(tokenId) == _msgSender() ||\\r\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n        require(\\r\\n            isApprovedOrOwner,\\r\\n            \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            prevOwnership.addr == from,\\r\\n            \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n        _addressData[from].balance -= 1;\\r\\n        _addressData[to].balance += 1;\\r\\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n        uint256 nextTokenId = tokenId + 1;\\r\\n        if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n            if (_exists(nextTokenId)) {\\r\\n                _ownerships[nextTokenId] = TokenOwnership(\\r\\n                    prevOwnership.addr,\\r\\n                    prevOwnership.startTimestamp\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address owner\\r\\n    ) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n    /**\\r\\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n     */\\r\\n    function _setOwnersExplicit(uint256 quantity) internal {\\r\\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n        require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n        if (endIndex > currentIndex - 1) {\\r\\n            endIndex = currentIndex - 1;\\r\\n        }\\r\\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n        require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n            if (_ownerships[i].addr == address(0)) {\\r\\n                TokenOwnership memory ownership = ownershipOf(i);\\r\\n                _ownerships[i] = TokenOwnership(\\r\\n                    ownership.addr,\\r\\n                    ownership.startTimestamp\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        nextOwnerToExplicitlySet = endIndex + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    _msgSender(),\\r\\n                    from,\\r\\n                    tokenId,\\r\\n                    _data\\r\\n                )\\r\\n            returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\r\\n                        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n                    );\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isOwnerOf(address account, uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i; i < tokenIds.length; ++i) {\\r\\n            if (ownershipOf(tokenIds[i]).addr != account) return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferBatch(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata tokenIds,\\r\\n        bytes calldata data\\r\\n    ) external {\\r\\n        for (uint256 i; i < tokenIds.length; ++i) {\\r\\n            safeTransferFrom(from, to, tokenIds[i], data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 quantity = balanceOf(account);\\r\\n        uint256[] memory wallet = new uint256[](quantity);\\r\\n        for (uint256 i; i < quantity; ++i) {\\r\\n            wallet[i] = tokenOfOwnerByIndex(account, i);\\r\\n        }\\r\\n        return wallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0xd7b5ad4869513db0f230dc7abafa3597772bda809e52e7ad81ba174439158687\",\"license\":\"MIT\"},\"contracts/utils/Merkle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Merkle is Ownable {\\r\\n    bytes32 private whitelist;\\r\\n    bytes32 private freeClaim;\\r\\n\\r\\n    constructor(bytes32 _whitelist, bytes32 _freeClaim) {\\r\\n        whitelist = _whitelist;\\r\\n        freeClaim = _freeClaim;\\r\\n    }\\r\\n\\r\\n    function _whitelistLeaf(\\r\\n        address account /*, uint256 tokenId*/\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    /*tokenId,*/\\r\\n                    account\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _claimLeaf(address account, uint256 count)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(count, account));\\r\\n    }\\r\\n\\r\\n    function _whitelistVerify(bytes32 leaf, bytes32[] memory proof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return MerkleProof.verify(proof, whitelist, leaf);\\r\\n    }\\r\\n\\r\\n    function _claimVerify(bytes32 leaf, bytes32[] memory proof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return MerkleProof.verify(proof, freeClaim, leaf);\\r\\n    }\\r\\n\\r\\n    function setWhitelistRoot(bytes32 _root) external onlyOwner {\\r\\n        whitelist = _root;\\r\\n    }\\r\\n\\r\\n    function setFreeClaimRoot(bytes32 _root) external onlyOwner {\\r\\n        freeClaim = _root;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x231103b7fc81e9d9c293bc192d241b967c0d11140a5caa98eb6f80615a7d8788\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6000808055600755601280546001600160a01b03191673625ff9ce2d51ee66ffce890a455968cb39e7a40517905560e0604052600560a081905264173539b7b760d91b60c090815262000056916015919062000c23565b50604080518082019091527306b9a0f17d8281ba7d6c0a862750f39d1281a17781526012546001600160a01b031660208201526200009990601990600262000cb2565b50604080518082019091526014815260506020820152620000bf90601a90600262000d0a565b50348015620000cd57600080fd5b5060405162006b5038038062006b50833981016040819052620000f09162000d64565b6040805160c081018252600081526714d1120d7b16000060208201526102589181019190915266b1a2bc2ec500006060820152601b608082015260a081016002815250670214e8348c4f00006040518060e001604052806114508152602001600181526020016001815260200160006001600160f81b0316815260200160011515815260200160011515815260200160011515815250602360009054906101000a90046001600160a01b031681818989898966f8b0a10e47000060405180608001604052806044815260200162006aec604491396040518060400160405280600b81526020016a13919510dbdb9d1c9858dd60aa1b815250604051806040016040528060048152602001634e46544360e01b81525060198054806020026020016040519081016040528092919081815260200182805480156200025d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200023e575b5050505050601a805480602002602001604051908101604052809291908181526020018280548015620002b057602002820191906000526020600020905b8154815260200190600101908083116200029b575b5050505050838361271060008111620003205760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b60648201526084015b60405180910390fd5b82516200033590600190602086019062000c23565b5081516200034b90600290602085019062000c23565b50608052506200035d90503362000506565b6008805460ff60a01b1916905560016009558051825114620003dd5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840162000317565b6000825111620004305760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640162000317565b60005b82518110156200049c576200048783828151811062000456576200045662000db1565b602002602001015183838151811062000473576200047362000db1565b60200260200101516200055860201b60201c565b80620004938162000ddd565b91505062000433565b5050506013869055601485905560178490558251620004c390601190602086019062000c23565b505050601c95909555505050601d5550620004de8262000746565b620004e98162000985565b50620004f890508484620009f2565b505050505050505062000e53565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620005c55760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840162000317565b60008111620006175760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640162000317565b6001600160a01b0382166000908152600c602052604090205415620006935760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840162000317565b600e8054600181019091557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0384169081179091556000908152600c60205260409020819055600a54620006fd90829062000dfb565b600a55604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b6008546001600160a01b03163314620007915760405162461bcd60e51b8152602060048201819052602482015260008051602062006b30833981519152604482015260640162000317565b80606001516001600160f81b031681600001511015620007f45760405162461bcd60e51b815260206004820152601c60248201527f53656c6c65723a2065786365737369766520667265652071756f746100000000604482015260640162000317565b6200080b602462000c1f60201b620035171760201c565b815110156200085d5760405162461bcd60e51b815260206004820181905260248201527f53656c6c65723a20696e76656e746f7279203c20616c726561647920736f6c64604482015260640162000317565b62000874602662000c1f60201b620035171760201c565b81606001516001600160f81b03161015620008dc5760405162461bcd60e51b815260206004820152602160248201527f53656c6c65723a20667265652071756f7461203c20616c7265616479207573656044820152601960fa1b606482015260840162000317565b602254610100900460ff1615620008fa57600160c0820152601e5481525b60225460ff16156200091f57600160a08201526021546001600160f81b031660608201525b8051601e55602080820151601f5560408201519055606081015160808201511515600160f81b026001600160f81b039091161760215560a08101516022805460c09093015115156101000261ff00199215159290921661ffff1990931692909217179055565b6008546001600160a01b03163314620009d05760405162461bcd60e51b8152602060048201819052602482015260008051602062006b30833981519152604482015260640162000317565b602380546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b0316331462000a3d5760405162461bcd60e51b8152602060048201819052602482015260008051602062006b30833981519152604482015260640162000317565b8082608001516001600160f81b03168360600151028360200151031462000ab55760405162461bcd60e51b815260206004820152602560248201527f4c696e656172447574636841756374696f6e3a20696e636f7272656374207265604482015264736572766560d81b606482015260840162000317565b60008260a00151600281111562000ad05762000ad062000d9b565b141562000b2c5760405162461bcd60e51b8152602060048201526024808201527f4c696e656172447574636841756374696f6e3a20756e737065636966696564206044820152631d5b9a5d60e21b606482015260840162000317565b600082604001511162000b955760405162461bcd60e51b815260206004820152602a60248201527f4c696e656172447574636841756374696f6e3a207a65726f206465637265617360448201526919481a5b9d195c9d985b60b21b606482015260840162000317565b81516027908155602083015160285560408301516029556060830151602a556080830151602b80547fff00000000000000000000000000000000000000000000000000000000000000166001600160f81b03909216918217815560a0850151859392909190600160f81b83600281111562000c145762000c1462000d9b565b021790555050505050565b5490565b82805462000c319062000e16565b90600052602060002090601f01602090048101928262000c55576000855562000ca0565b82601f1062000c7057805160ff191683800117855562000ca0565b8280016001018555821562000ca0579182015b8281111562000ca057825182559160200191906001019062000c83565b5062000cae92915062000d4d565b5090565b82805482825590600052602060002090810192821562000ca0579160200282015b8281111562000ca057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000cd3565b82805482825590600052602060002090810192821562000ca0579160200282015b8281111562000ca0578251829060ff1690559160200191906001019062000d2b565b5b8082111562000cae576000815560010162000d4e565b6000806000806080858703121562000d7b57600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141562000df45762000df462000dc7565b5060010190565b6000821982111562000e115762000e1162000dc7565b500190565b600181811c9082168062000e2b57607f821691505b6020821081141562000e4d57634e487b7160e01b600052602260045260246000fd5b50919050565b608051615c6f62000e7d60003960008181613ebf01528181613ee901526149ef0152615c6f6000f3fe60806040526004361061049f5760003560e01c80638456cb591161025e578063bf62e21d11610143578063d79779b2116100bb578063e985e9c51161008a578063f2fde38b1161006f578063f2fde38b14610e14578063f5aa406d14610e34578063fa53cd3814610e5457600080fd5b8063e985e9c514610d9e578063ef5d9ae814610de757600080fd5b8063d79779b214610d1e578063e0c5b0ed14610d54578063e222c7f914610d74578063e33b7de314610d8957600080fd5b8063c87b56dd11610112578063ce7c2ac2116100f7578063ce7c2ac214610cbf578063d2cab05614610cf5578063d7224ba014610d0857600080fd5b8063c87b56dd14610c8a578063cd5d4a9014610caa57600080fd5b8063bf62e21d14610bf4578063c023b88814610c14578063c556da8e14610c34578063c85b380d14610c6a57600080fd5b80639b642de1116101d6578063a6f2ae3a116101a5578063b534a5c41161018a578063b534a5c414610b29578063b88d4fde14610b49578063bb69b7ef14610b6957600080fd5b8063a6f2ae3a14610b01578063ae26974314610b0957600080fd5b80639b642de114610a98578063a035b1fe14610ab8578063a0712d6814610ace578063a22cb46514610ae157600080fd5b80639106d7ba1161022d57806395d89b411161021257806395d89b4114610a385780639852595c14610a4d5780639abc832014610a8357600080fd5b80639106d7ba14610a0357806391b7f5ed14610a1857600080fd5b80638456cb59146109905780638b83209b146109a55780638da5cb5b146109c55780639097548d146109e357600080fd5b80633ccfd60b11610384578063564566a8116102fc57806370a08231116102cb5780637bd07f8b116102b05780637bd07f8b1461090d5780637e15144b1461095b5780637e2285aa1461097057600080fd5b806370a08231146108d8578063715018a6146108f857600080fd5b8063564566a8146108695780635c975abb146108835780636352211e146108a25780636ac5db19146108c257600080fd5b8063438b6300116103535780634d44660c116103385780634d44660c1461080f5780634f6ccce71461082f578063524513d61461084f57600080fd5b8063438b6300146107c257806348b75044146107ef57600080fd5b80633ccfd60b1461073f5780633f4ba83a14610747578063406072a91461075c57806342842e0e146107a257600080fd5b80631fe9eabc116104175780632f745c59116103e657806338af3eed116103cb57806338af3eed146106ea5780633a98ef391461070a5780633b4c4b251461071f57600080fd5b80632f745c59146106aa5780632fbba115146106ca57600080fd5b80631fe9eabc1461063757806323b872dd146106575780632f274bd4146106775780632f52ebb71461069757600080fd5b8063095ea7b31161046e57806318160ddd1161045357806318160ddd146105e257806319165587146105f75780631c31f7101461061757600080fd5b8063095ea7b3146105a05780631525ff7d146105c257600080fd5b806301ffc9a7146104ed578063047fc9aa1461052257806306fdde0314610546578063081812fc1461056857600080fd5b366104e8577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156104f957600080fd5b5061050d610508366004615036565b610e6e565b60405190151581526020015b60405180910390f35b34801561052e57600080fd5b5061053860135481565b604051908152602001610519565b34801561055257600080fd5b5061055b610f3f565b60405161051991906150ab565b34801561057457600080fd5b506105886105833660046150be565b610fd1565b6040516001600160a01b039091168152602001610519565b3480156105ac57600080fd5b506105c06105bb3660046150ec565b611071565b005b3480156105ce57600080fd5b506105c06105dd366004615118565b6111a4565b3480156105ee57600080fd5b50600054610538565b34801561060357600080fd5b506105c0610612366004615118565b61121b565b34801561062357600080fd5b506105c0610632366004615118565b6113de565b34801561064357600080fd5b506105c06106523660046150be565b611455565b34801561066357600080fd5b506105c0610672366004615135565b6114a2565b34801561068357600080fd5b506105c0610692366004615210565b6114ad565b6105c06106a53660046152ff565b6116d5565b3480156106b657600080fd5b506105386106c53660046150ec565b61192a565b3480156106d657600080fd5b506105c06106e53660046150be565b611ac2565b3480156106f657600080fd5b50602354610588906001600160a01b031681565b34801561071657600080fd5b50600a54610538565b34801561072b57600080fd5b506105c061073a3660046150be565b611b85565b6105c0611bd2565b34801561075357600080fd5b506105c0611c7d565b34801561076857600080fd5b5061053861077736600461534b565b6001600160a01b03918216600090815260106020908152604080832093909416825291909152205490565b3480156107ae57600080fd5b506105c06107bd366004615135565b611ccf565b3480156107ce57600080fd5b506107e26107dd366004615118565b611cea565b6040516105199190615384565b3480156107fb57600080fd5b506105c061080a36600461534b565b611d8a565b34801561081b57600080fd5b5061050d61082a3660046153c8565b612011565b34801561083b57600080fd5b5061053861084a3660046150be565b61207e565b34801561085b57600080fd5b50602e5461050d9060ff1681565b34801561087557600080fd5b5060185461050d9060ff1681565b34801561088f57600080fd5b50600854600160a01b900460ff1661050d565b3480156108ae57600080fd5b506105886108bd3660046150be565b6120fa565b3480156108ce57600080fd5b5061053860145481565b3480156108e457600080fd5b506105386108f3366004615118565b61210c565b34801561090457600080fd5b506105c06121b8565b34801561091957600080fd5b50602754602854602954602a54602b5461094994939291906001600160f81b03811690600160f81b900460ff1686565b6040516105199695949392919061541a565b34801561096757600080fd5b506105c061220a565b34801561097c57600080fd5b506105c061098b3660046154cd565b6122a0565b34801561099c57600080fd5b506105c06122ff565b3480156109b157600080fd5b506105886109c03660046150be565b61234f565b3480156109d157600080fd5b506008546001600160a01b0316610588565b3480156109ef57600080fd5b506105386109fe3660046150be565b61237f565b348015610a0f57600080fd5b506105386124a4565b348015610a2457600080fd5b506105c0610a333660046150be565b6124b4565b348015610a4457600080fd5b5061055b612501565b348015610a5957600080fd5b50610538610a68366004615118565b6001600160a01b03166000908152600d602052604090205490565b348015610a8f57600080fd5b5061055b612510565b348015610aa457600080fd5b506105c0610ab33660046154cd565b61259e565b348015610ac457600080fd5b5061053860175481565b6105c0610adc3660046150be565b6125f9565b348015610aed57600080fd5b506105c0610afc366004615516565b61268e565b6105c0612753565b348015610b1557600080fd5b506105c0610b243660046150be565b61275e565b348015610b3557600080fd5b506105c0610b44366004615544565b6127ab565b348015610b5557600080fd5b506105c0610b64366004615605565b612829565b348015610b7557600080fd5b50601e54601f54602054602154602254610bb1949392916001600160f81b0381169160ff600160f81b9092048216918181169161010090041687565b604080519788526020880196909652948601939093526001600160f81b03909116606085015215156080840152151560a0830152151560c082015260e001610519565b348015610c0057600080fd5b506105c0610c0f3660046150ec565b6128b8565b348015610c2057600080fd5b506105c0610c2f36600461571d565b612a88565b348015610c4057600080fd5b50610538610c4f366004615118565b6001600160a01b03166000908152602f602052604090205490565b348015610c7657600080fd5b506105c0610c853660046157d6565b612cd6565b348015610c9657600080fd5b5061055b610ca53660046150be565b612f38565b348015610cb657600080fd5b506105c0613098565b348015610ccb57600080fd5b50610538610cda366004615118565b6001600160a01b03166000908152600c602052604090205490565b6105c0610d033660046152ff565b613128565b348015610d1457600080fd5b5061053860075481565b348015610d2a57600080fd5b50610538610d39366004615118565b6001600160a01b03166000908152600f602052604090205490565b348015610d6057600080fd5b506105c0610d6f3660046150be565b613320565b348015610d8057600080fd5b506105c061336d565b348015610d9557600080fd5b50600b54610538565b348015610daa57600080fd5b5061050d610db936600461534b565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b348015610df357600080fd5b50610538610e02366004615118565b602f6020526000908152604090205481565b348015610e2057600080fd5b506105c0610e2f366004615118565b6133fd565b348015610e4057600080fd5b506105c0610e4f3660046150be565b6134ca565b348015610e6057600080fd5b50602c5461050d9060ff1681565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480610ed157506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610f0557506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b80610f3957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060018054610f4e90615859565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7a90615859565b8015610fc75780601f10610f9c57610100808354040283529160200191610fc7565b820191906000526020600020905b815481529060010190602001808311610faa57829003601f168201915b5050505050905090565b6000610fde826000541190565b6110555760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201527f78697374656e7420746f6b656e0000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061107c826120fa565b9050806001600160a01b0316836001600160a01b031614156111065760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161104c565b336001600160a01b038216148061112257506111228133610db9565b6111945760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606482015260840161104c565b61119f83838361351b565b505050565b6008546001600160a01b031633146111ec5760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b6012805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600c602052604090205461128f5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b606482015260840161104c565b600061129a600b5490565b6112a490476158aa565b905060006112d183836112cc866001600160a01b03166000908152600d602052604090205490565b613584565b9050806113465760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201527f647565207061796d656e74000000000000000000000000000000000000000000606482015260840161104c565b6001600160a01b0383166000908152600d60205260408120805483929061136e9084906158aa565b9250508190555080600b600082825461138791906158aa565b90915550611397905083826135ca565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b6008546001600160a01b031633146114265760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b6023805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6008546001600160a01b0316331461149d5760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b601455565b61119f8383836136e3565b6008546001600160a01b031633146114f55760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b80606001516001600160f81b0316816000015110156115565760405162461bcd60e51b815260206004820152601c60248201527f53656c6c65723a2065786365737369766520667265652071756f746100000000604482015260640161104c565b602454815110156115a95760405162461bcd60e51b815260206004820181905260248201527f53656c6c65723a20696e76656e746f7279203c20616c726561647920736f6c64604482015260640161104c565b60265481606001516001600160f81b0316101561162e5760405162461bcd60e51b815260206004820152602160248201527f53656c6c65723a20667265652071756f7461203c20616c72656164792075736560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161104c565b602254610100900460ff161561164b57600160c0820152601e5481525b60225460ff161561166f57600160a08201526021546001600160f81b031660608201525b8051601e55602080820151601f5560408201519055606081015160808201511515600160f81b026001600160f81b039091161760215560a08101516022805460c09093015115156101000261ff00199215159290921661ffff1990931692909217179055565b600260095414156117285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104c565b6002600955602c5460ff1661176a5760405162461bcd60e51b81526020600482015260086024820152674e6f74204c69766560c01b604482015260640161104c565b6117b06117773385613ac0565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613b0e92505050565b6117fc5760405162461bcd60e51b815260206004820152600760248201527f496e76616c696400000000000000000000000000000000000000000000000000604482015260640161104c565b336000908152602f602052604090205483141561185b5760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d65640000000000000000000000000000000000604482015260640161104c565b60005460135461186b85836158aa565b11156118b95760405162461bcd60e51b815260206004820152600860248201527f536f6c64206f7574000000000000000000000000000000000000000000000000604482015260640161104c565b6118c33385613b1d565b336000908152602f6020526040812080548692906118e29084906158aa565b9091555050604080518581523360208201527f6aa3eac93d079e5e100b1029be716caa33586c96aa4baac390669fb5c2a21212910160405180910390a1505060016009555050565b60006119358361210c565b82106119a95760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e60448201527f6473000000000000000000000000000000000000000000000000000000000000606482015260840161104c565b600080549080805b83811015611a53576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215611a0457805192505b876001600160a01b0316836001600160a01b03161415611a405786841415611a3257509350610f3992505050565b83611a3c816158c2565b9450505b5080611a4b816158c2565b9150506119b1565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201527f6f776e657220627920696e646578000000000000000000000000000000000000606482015260840161104c565b60026009541415611b155760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104c565b60026009556012546001600160a01b03163314611b745760405162461bcd60e51b815260206004820152600960248201527f4f6e6c79207465616d0000000000000000000000000000000000000000000000604482015260640161104c565b611b7d81613b37565b506001600955565b6008546001600160a01b03163314611bcd5760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b601355565b6008546001600160a01b03163314611c1a5760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b6012546040516000916001600160a01b03169047908381818185875af1925050503d8060008114611c67576040519150601f19603f3d011682016040523d82523d6000602084013e611c6c565b606091505b5050905080611c7a57600080fd5b50565b6008546001600160a01b03163314611cc55760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b611ccd613cee565b565b61119f83838360405180602001604052806000815250612829565b60606000611cf78361210c565b905060008167ffffffffffffffff811115611d1457611d14615176565b604051908082528060200260200182016040528015611d3d578160200160208202803683370190505b50905060005b82811015611d8257611d55858261192a565b828281518110611d6757611d676158dd565b6020908102919091010152611d7b816158c2565b9050611d43565b509392505050565b6001600160a01b0381166000908152600c6020526040902054611dfe5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b606482015260840161104c565b6001600160a01b0382166000908152600f60205260408120546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9891906158f3565b611ea291906158aa565b90506000611edb83836112cc87876001600160a01b03918216600090815260106020908152604080832093909416825291909152205490565b905080611f505760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201527f647565207061796d656e74000000000000000000000000000000000000000000606482015260840161104c565b6001600160a01b03808516600090815260106020908152604080832093871683529290529081208054839290611f879084906158aa565b90915550506001600160a01b0384166000908152600f602052604081208054839290611fb49084906158aa565b90915550611fc59050848483613daa565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b6000805b8281101561207157846001600160a01b031661204885858481811061203c5761203c6158dd565b90506020020135613e2a565b516001600160a01b031614612061576000915050612077565b61206a816158c2565b9050612015565b50600190505b9392505050565b6000805482106120f65760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f7560448201527f6e64730000000000000000000000000000000000000000000000000000000000606482015260840161104c565b5090565b600061210582613e2a565b5192915050565b60006001600160a01b03821661218a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161104c565b506001600160a01b03166000908152600460205260409020546fffffffffffffffffffffffffffffffff1690565b6008546001600160a01b031633146122005760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b611ccd6000613ff5565b6008546001600160a01b031633146122525760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b602e805460ff8082161560ff1990921682179092556040519116151581527f6b5206c2e71025c60cb0f0442786c5cb91a18e66727fb072cb52265c4a28e45e906020015b60405180910390a1565b6008546001600160a01b031633146122e85760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b80516122fb906015906020840190614f90565b5050565b6008546001600160a01b031633146123475760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b611ccd614054565b6000600e8281548110612364576123646158dd565b6000918252602090912001546001600160a01b031692915050565b600060278160016004830154600160f81b900460ff1660028111156123a6576123a6615404565b14156123b35750436123de565b60026004830154600160f81b900460ff1660028111156123d5576123d5615404565b14156123de5750425b8154158015906123ef575081548110155b61243b5760405162461bcd60e51b815260206004820152601f60248201527f4c696e656172447574636841756374696f6e3a204e6f74207374617274656400604482015260640161104c565b6002820154825460009161247091612453908561590c565b61245d9190615939565b60048501546001600160f81b0316614104565b9050826003015481612482919061594d565b8360010154612491919061590c565b61249b908661594d565b95945050505050565b60006124af60245490565b905090565b6008546001600160a01b031633146124fc5760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b601755565b606060028054610f4e90615859565b6011805461251d90615859565b80601f016020809104026020016040519081016040528092919081815260200182805461254990615859565b80156125965780601f1061256b57610100808354040283529160200191612596565b820191906000526020600020905b81548152906001019060200180831161257957829003601f168201915b505050505081565b6008546001600160a01b031633146125e65760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b80516122fb906011906020840190614f90565b6002600954141561264c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104c565b600260095560185460ff16611b745760405162461bcd60e51b81526020600482015260086024820152674e6f74204c69766560c01b604482015260640161104c565b6001600160a01b0382163314156126e75760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c6572000000000000604482015260640161104c565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611ccd33600161411a565b6008546001600160a01b031633146127a65760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b601d55565b60005b838110156128205761281087878787858181106127cd576127cd6158dd565b9050602002013586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061282992505050565b612819816158c2565b90506127ae565b50505050505050565b6128348484846136e3565b61284084848484614669565b6128b25760405162461bcd60e51b815260206004820152603360248201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260448201527f6563656976657220696d706c656d656e74657200000000000000000000000000606482015260840161104c565b50505050565b6008546001600160a01b031633146129005760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b600854600160a01b900460ff161561295a5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161104c565b6021546001600160f81b03166129828261297360265490565b61297d908461590c565b614104565b9150600082116129d45760405162461bcd60e51b815260206004820152601b60248201527f53656c6c65723a20467265652071756f74612065786365656465640000000000604482015260640161104c565b601e546129e48361297360245490565b925060008311612a365760405162461bcd60e51b815260206004820152601060248201527f53656c6c65723a20536f6c64206f757400000000000000000000000000000000604482015260640161104c565b612a42848460016147bd565b612a4d6024846147c7565b612a586026846147c7565b80612a6260245490565b1115612a7057612a7061596c565b81612a7a60265490565b11156128b2576128b261596c565b60026009541415612adb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104c565b60026009556008546001600160a01b03163314612b285760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b603282511115612b7a5760405162461bcd60e51b815260206004820152600c60248201527f4c69737420746f6f206269670000000000000000000000000000000000000000604482015260640161104c565b8051825114612bcb5760405162461bcd60e51b815260206004820152601460248201527f496e636f727265637420706172616d6574657273000000000000000000000000604482015260640161104c565b6000805490805b8451811015612c1457848181518110612bed57612bed6158dd565b602002602001015182612c0091906158aa565b915080612c0c816158c2565b915050612bd2565b50601354612c2282846158aa565b1115612c705760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f756768204d696e747320617661696c61626c65000000000000604482015260640161104c565b60005b8451811015612cca57612cb8848281518110612c9157612c916158dd565b6020026020010151868381518110612cab57612cab6158dd565b6020026020010151613b1d565b80612cc2816158c2565b915050612c73565b50506001600955505050565b6008546001600160a01b03163314612d1e5760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b8082608001516001600160f81b031683606001510283602001510314612dac5760405162461bcd60e51b815260206004820152602560248201527f4c696e656172447574636841756374696f6e3a20696e636f727265637420726560448201527f7365727665000000000000000000000000000000000000000000000000000000606482015260840161104c565b60008260a001516002811115612dc457612dc4615404565b1415612e375760405162461bcd60e51b8152602060048201526024808201527f4c696e656172447574636841756374696f6e3a20756e7370656369666965642060448201527f756e697400000000000000000000000000000000000000000000000000000000606482015260840161104c565b6000826040015111612eb15760405162461bcd60e51b815260206004820152602a60248201527f4c696e656172447574636841756374696f6e3a207a65726f206465637265617360448201527f6520696e74657276616c00000000000000000000000000000000000000000000606482015260840161104c565b81516027908155602083015160285560408301516029556060830151602a556080830151602b80547fff00000000000000000000000000000000000000000000000000000000000000166001600160f81b03909216918217815560a0850151859392909190600160f81b836002811115612f2d57612f2d615404565b021790555050505050565b6060612f45826000541190565b612fb75760405162461bcd60e51b815260206004820152602160248201527f4552433732314d657461646174613a204e6f6e6578697374656e7420746f6b6560448201527f6e00000000000000000000000000000000000000000000000000000000000000606482015260840161104c565b600060118054612fc690615859565b80601f0160208091040260200160405190810160405280929190818152602001828054612ff290615859565b801561303f5780601f106130145761010080835404028352916020019161303f565b820191906000526020600020905b81548152906001019060200180831161302257829003601f168201915b5050505050905060008151116130645760405180602001604052806000815250612077565b8061306e846147db565b601560405160200161308293929190615982565b6040516020818303038152906040529392505050565b6008546001600160a01b031633146130e05760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b602c805460ff8082161560ff1990921682179092556040519116151581527fae946fdec58f87284b0bba64e6d052746da4c3de85ad8c080b9e03d7f7497a5e90602001612296565b6002600954141561317b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104c565b6002600955602e5460ff166131bd5760405162461bcd60e51b81526020600482015260086024820152674e6f74204c69766560c01b604482015260640161104c565b604080513360601b6bffffffffffffffffffffffff19166020808301919091528251601481840301815260349092019092528051910120613231908383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506148f592505050565b61327d5760405162461bcd60e51b815260206004820152600760248201527f496e76616c696400000000000000000000000000000000000000000000000000604482015260640161104c565b601454336000908152602d602052604090205461329b9085906158aa565b11156132e95760405162461bcd60e51b815260206004820152600860248201527f4d6178204d696e74000000000000000000000000000000000000000000000000604482015260640161104c565b6132f283613b37565b336000908152602d6020526040812080548592906133119084906158aa565b90915550506001600955505050565b6008546001600160a01b031633146133685760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b602755565b6008546001600160a01b031633146133b55760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b6018805460ff8082161560ff1990921682179092556040519116151581527fe8a4303c22d8b575a6f175ea4803f56b0a4551ac9e22153304feb0ddfd61435590602001612296565b6008546001600160a01b031633146134455760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b6001600160a01b0381166134c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161104c565b611c7a81613ff5565b6008546001600160a01b031633146135125760405162461bcd60e51b81526020600482018190526024820152600080516020615c1a833981519152604482015260640161104c565b601c55565b5490565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600a546001600160a01b0384166000908152600c6020526040812054909183916135ae908661594d565b6135b89190615939565b6135c2919061590c565b949350505050565b8047101561361a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161104c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613667576040519150601f19603f3d011682016040523d82523d6000602084013e61366c565b606091505b505090508061119f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161104c565b60006136ee82613e2a565b80519091506000906001600160a01b0316336001600160a01b0316148061372557503361371a84610fd1565b6001600160a01b0316145b80613737575081516137379033610db9565b9050806137ac5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161104c565b846001600160a01b031682600001516001600160a01b0316146138375760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f727265637460448201527f206f776e65720000000000000000000000000000000000000000000000000000606482015260840161104c565b6001600160a01b0384166138b35760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161104c565b6138c3600084846000015161351b565b6001600160a01b03851660009081526004602052604081208054600192906138fe9084906fffffffffffffffffffffffffffffffff16615a46565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556001600160a01b0386166000908152600460205260408120805460019450909261395391859116615a77565b82546fffffffffffffffffffffffffffffffff9182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b031990911691909216171790556139e48460016158aa565b6000818152600360205260409020549091506001600160a01b0316613a7657613a0e816000541190565b15613a765760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b60008183604051602001613af092919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b600061207782601d5485614900565b6122fb828260405180602001604052806000815250614916565b60005481613b875760405162461bcd60e51b815260206004820152600a60248201527f436f756e74206973203000000000000000000000000000000000000000000000604482015260640161104c565b601354613b9483836158aa565b1115613be25760405162461bcd60e51b815260206004820152600860248201527f536f6c64206f7574000000000000000000000000000000000000000000000000604482015260640161104c565b6012546001600160a01b03163314613cbc573482601754613c03919061594d565b14613c505760405162461bcd60e51b815260206004820152600d60248201527f496e636f72726563742045746800000000000000000000000000000000000000604482015260640161104c565b601454336000908152601b6020526040902054613c6e9084906158aa565b1115613cbc5760405162461bcd60e51b815260206004820152600860248201527f4d6178204d696e74000000000000000000000000000000000000000000000000604482015260640161104c565b613cc63383613b1d565b336000908152601b602052604081208054849290613ce59084906158aa565b90915550505050565b600854600160a01b900460ff16613d475760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161104c565b600880547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001612296565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261119f908490614cb3565b6040805180820190915260008082526020820152613e49826000541190565b613ebb5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e6578697360448201527f74656e7420746f6b656e00000000000000000000000000000000000000000000606482015260840161104c565b60007f00000000000000000000000000000000000000000000000000000000000000008310613f1c57613f0e7f00000000000000000000000000000000000000000000000000000000000000008461590c565b613f199060016158aa565b90505b825b818110613f86576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215613f7357949350505050565b5080613f7e81615aab565b915050613f1e565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201527f206f776e6572206f6620746f6b656e0000000000000000000000000000000000606482015260840161104c565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600854600160a01b900460ff16156140ae5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161104c565b600880547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613d923390565b60008183106141135781612077565b5090919050565b6002600954141561416d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104c565b6002600955600854600160a01b900460ff16156141cc5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161104c565b6040805160e081018252601e548152601f54602080830191909152549181018290526021546001600160f81b038116606083015260ff600160f81b909104811615156080830152602254808216151560a0840152610100900416151560c0820152906000901561424957614244838360400151614104565b61424b565b825b90506000808360800151156142935760608401518451614274916001600160f81b03169061590c565b915061427f60265490565b60245461428c919061590c565b90506142a3565b835191506142a060245490565b90505b6142b18361297d838561590c565b9250600083116143035760405162461bcd60e51b815260206004820152601060248201527f53656c6c65723a20536f6c64206f757400000000000000000000000000000000604482015260640161104c565b60208401511561449357336001600160a01b0387168114159060009032148015906143375750326001600160a01b03891614155b905061437985896040518060400160405280600b81526020017f4275796572206c696d6974000000000000000000000000000000000000000000815250614d98565b945081156143c4576143c185336040518060400160405280600c81526020017f53656e646572206c696d69740000000000000000000000000000000000000000815250614d98565b94505b801561440d5761440a85326040518060400160405280600c81526020017f4f726967696e206c696d69740000000000000000000000000000000000000000815250614d98565b94505b6001600160a01b038816600090815260256020526040812080548792906144359084906158aa565b9091555050811561446557336000908152602560205260408120805487929061445f9084906158aa565b90915550505b801561449057326000908152602560205260408120805487929061448a9084906158aa565b90915550505b50505b600061449e8461237f565b9050803410156144f4576144be6144b9633b9aca0083615939565b6147db565b6040516020016144ce9190615ac2565b60408051601f198184030181529082905262461bcd60e51b825261104c916004016150ab565b614500878560006147bd565b61450b6024856147c7565b8451602454111561451e5761451e61596c565b80156145835760235461453a906001600160a01b0316826135ca565b60235460408051868152602081018490526001600160a01b03909216917f01f51b99bd1c3cca301836178e5dee13aadfe44eff06dc3ddcbf3c9d058454f8910160405180910390a25b8034111561465b57336000614598833461590c565b9050600080836001600160a01b03168360405160006040518083038185875af1925050503d80600081146145e8576040519150601f19603f3d011682016040523d82523d6000602084013e6145ed565b606091505b50915091508181906146125760405162461bcd60e51b815260040161104c91906150ab565b50836001600160a01b03167fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8460405161464e91815260200190565b60405180910390a2505050505b505060016009555050505050565b60006001600160a01b0384163b156147b257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906146ad903390899088908890600401615b2e565b6020604051808303816000875af19250505080156146e8575060408051601f3d908101601f191682019092526146e591810190615b6a565b60015b614798573d808015614716576040519150601f19603f3d011682016040523d82523d6000602084013e61471b565b606091505b5080516147905760405162461bcd60e51b815260206004820152603360248201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260448201527f6563656976657220696d706c656d656e74657200000000000000000000000000606482015260840161104c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506135c2565b506001949350505050565b61119f8383613b1d565b80826000016000828254613ce591906158aa565b60608161481b57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115614845578061482f816158c2565b915061483e9050600a83615939565b915061481f565b60008167ffffffffffffffff81111561486057614860615176565b6040519080825280601f01601f19166020018201604052801561488a576020820181803683370190505b5090505b84156135c25761489f60018361590c565b91506148ac600a86615b87565b6148b79060306158aa565b60f81b8183815181106148cc576148cc6158dd565b60200101906001600160f81b031916908160001a9053506148ee600a86615939565b945061488e565b600061207782601c54855b60008261490d8584614de1565b14949350505050565b6000546001600160a01b0384166149955760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161104c565b6149a0816000541190565b156149ed5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e746564000000604482015260640161104c565b7f0000000000000000000000000000000000000000000000000000000000000000831115614a835760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f20686960448201527f6768000000000000000000000000000000000000000000000000000000000000606482015260840161104c565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546fffffffffffffffffffffffffffffffff80821683527001000000000000000000000000000000009091041691810191909152815180830190925280519091908190614af5908790615a77565b6fffffffffffffffffffffffffffffffff168152602001858360200151614b1c9190615a77565b6fffffffffffffffffffffffffffffffff9081169091526001600160a01b03808816600081815260046020908152604080832087519783015187167001000000000000000000000000000000000297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b85811015614ca85760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4614c166000888488614669565b614c885760405162461bcd60e51b815260206004820152603360248201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260448201527f6563656976657220696d706c656d656e74657200000000000000000000000000606482015260840161104c565b81614c92816158c2565b9250508080614ca0906158c2565b915050614bc9565b506000819055613ab8565b6000614d08826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614e859092919063ffffffff16565b80519091501561119f5780806020019051810190614d269190615b9b565b61119f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161104c565b6001600160a01b038216600090815260256020526040812054601f548291614dbf9161590c565b905080614dd757826040516020016144ce9190615bb8565b61249b8582614104565b600081815b8451811015611d82576000858281518110614e0357614e036158dd565b60200260200101519050808311614e45576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250614e72565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080614e7d816158c2565b915050614de6565b60606135c2848460008585843b614ede5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161104c565b600080866001600160a01b03168587604051614efa9190615bfd565b60006040518083038185875af1925050503d8060008114614f37576040519150601f19603f3d011682016040523d82523d6000602084013e614f3c565b606091505b5091509150614f4c828286614f57565b979650505050505050565b60608315614f66575081612077565b825115614f765782518084602001fd5b8160405162461bcd60e51b815260040161104c91906150ab565b828054614f9c90615859565b90600052602060002090601f016020900481019282614fbe5760008555615004565b82601f10614fd757805160ff1916838001178555615004565b82800160010185558215615004579182015b82811115615004578251825591602001919060010190614fe9565b506120f69291505b808211156120f6576000815560010161500c565b6001600160e01b031981168114611c7a57600080fd5b60006020828403121561504857600080fd5b813561207781615020565b60005b8381101561506e578181015183820152602001615056565b838111156128b25750506000910152565b60008151808452615097816020860160208601615053565b601f01601f19169290920160200192915050565b602081526000612077602083018461507f565b6000602082840312156150d057600080fd5b5035919050565b6001600160a01b0381168114611c7a57600080fd5b600080604083850312156150ff57600080fd5b823561510a816150d7565b946020939093013593505050565b60006020828403121561512a57600080fd5b8135612077816150d7565b60008060006060848603121561514a57600080fd5b8335615155816150d7565b92506020840135615165816150d7565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156151af576151af615176565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156151de576151de615176565b604052919050565b80356001600160f81b03811681146151fd57600080fd5b919050565b8015158114611c7a57600080fd5b600060e0828403121561522257600080fd5b60405160e0810181811067ffffffffffffffff8211171561524557615245615176565b806040525082358152602083013560208201526040830135604082015261526e606084016151e6565b6060820152608083013561528181615202565b608082015260a083013561529481615202565b60a082015260c08301356152a781615202565b60c08201529392505050565b60008083601f8401126152c557600080fd5b50813567ffffffffffffffff8111156152dd57600080fd5b6020830191508360208260051b85010111156152f857600080fd5b9250929050565b60008060006040848603121561531457600080fd5b83359250602084013567ffffffffffffffff81111561533257600080fd5b61533e868287016152b3565b9497909650939450505050565b6000806040838503121561535e57600080fd5b8235615369816150d7565b91506020830135615379816150d7565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156153bc578351835292840192918401916001016153a0565b50909695505050505050565b6000806000604084860312156153dd57600080fd5b83356153e8816150d7565b9250602084013567ffffffffffffffff81111561533257600080fd5b634e487b7160e01b600052602160045260246000fd5b600060c0820190508782528660208301528560408301528460608301526001600160f81b03841660808301526003831061546457634e487b7160e01b600052602160045260246000fd5b8260a0830152979650505050505050565b600067ffffffffffffffff83111561548f5761548f615176565b6154a2601f8401601f19166020016151b5565b90508281528383830111156154b657600080fd5b828260208301376000602084830101529392505050565b6000602082840312156154df57600080fd5b813567ffffffffffffffff8111156154f657600080fd5b8201601f8101841361550757600080fd5b6135c284823560208401615475565b6000806040838503121561552957600080fd5b8235615534816150d7565b9150602083013561537981615202565b6000806000806000806080878903121561555d57600080fd5b8635615568816150d7565b95506020870135615578816150d7565b9450604087013567ffffffffffffffff8082111561559557600080fd5b6155a18a838b016152b3565b909650945060608901359150808211156155ba57600080fd5b818901915089601f8301126155ce57600080fd5b8135818111156155dd57600080fd5b8a60208285010111156155ef57600080fd5b6020830194508093505050509295509295509295565b6000806000806080858703121561561b57600080fd5b8435615626816150d7565b93506020850135615636816150d7565b925060408501359150606085013567ffffffffffffffff81111561565957600080fd5b8501601f8101871361566a57600080fd5b61567987823560208401615475565b91505092959194509250565b600067ffffffffffffffff82111561569f5761569f615176565b5060051b60200190565b600082601f8301126156ba57600080fd5b813560206156cf6156ca83615685565b6151b5565b82815260059290921b840181019181810190868411156156ee57600080fd5b8286015b84811015615712578035615705816150d7565b83529183019183016156f2565b509695505050505050565b6000806040838503121561573057600080fd5b823567ffffffffffffffff8082111561574857600080fd5b818501915085601f83011261575c57600080fd5b8135602061576c6156ca83615685565b82815260059290921b8401810191818101908984111561578b57600080fd5b948201945b838610156157a957853582529482019490820190615790565b965050860135925050808211156157bf57600080fd5b506157cc858286016156a9565b9150509250929050565b60008082840360e08112156157ea57600080fd5b60c08112156157f857600080fd5b5061580161518c565b8335815260208401356020820152604084013560408201526060840135606082015261582f608085016151e6565b608082015260a08401356003811061584657600080fd5b60a08201529460c0939093013593505050565b600181811c9082168061586d57607f821691505b6020821081141561588e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156158bd576158bd615894565b500190565b60006000198214156158d6576158d6615894565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561590557600080fd5b5051919050565b60008282101561591e5761591e615894565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261594857615948615923565b500490565b600081600019048311821515161561596757615967615894565b500290565b634e487b7160e01b600052600160045260246000fd5b6000845160206159958285838a01615053565b8551918401916159a88184848a01615053565b8554920191600090600181811c90808316806159c557607f831692505b8583108114156159e357634e487b7160e01b85526022600452602485fd5b8080156159f75760018114615a0857615a35565b60ff19851688528388019550615a35565b60008b81526020902060005b85811015615a2d5781548a820152908401908801615a14565b505083880195505b50939b9a5050505050505050505050565b60006fffffffffffffffffffffffffffffffff83811690831681811015615a6f57615a6f615894565b039392505050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115615aa257615aa2615894565b01949350505050565b600081615aba57615aba615894565b506000190190565b7f53656c6c65723a20436f73747320000000000000000000000000000000000000815260008251615afa81600e850160208701615053565b7f2047576569000000000000000000000000000000000000000000000000000000600e939091019283015250601301919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615b60608083018461507f565b9695505050505050565b600060208284031215615b7c57600080fd5b815161207781615020565b600082615b9657615b96615923565b500690565b600060208284031215615bad57600080fd5b815161207781615202565b7f53656c6c65723a20000000000000000000000000000000000000000000000000815260008251615bf0816008850160208701615053565b9190910160080192915050565b60008251615c0f818460208701615053565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200d34d6ade8c5e58ff50924836b46d4708124dc8ae8515d1dce75691778d0677f64736f6c634300080b003368747470733a2f2f697066732e696f2f697066732f516d65487a6f6754784d6b32377844415264504a66514d714e463178795574346f45434e537243516670774348382f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setAuctionConfig((uint256,uint256,uint256,uint256,uint248,uint8),uint256)": {
        "params": {
          "expectedReserve": "A safety check that the reserve, as calculated from the config, is as expected."
        }
      },
      "setAuctionStartPoint(uint256)": {
        "details": "The auction can be toggle on and off with this function, without the cost of having to update the entire config."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Refund(address,uint256)": {
        "notice": "Emitted when a buyer is refunded."
      },
      "Revenue(address,uint256,uint256)": {
        "notice": "Emitted on all purchases of non-zero amount."
      }
    },
    "kind": "user",
    "methods": {
      "beneficiary()": {
        "notice": "Recipient of revenues."
      },
      "buy()": {
        "notice": "LinearDutchAuction Required FunctionsEntry point for purchase of a single token."
      },
      "cost(uint256)": {
        "notice": "Override of Seller.cost() with Dutch-auction logic."
      },
      "dutchAuctionConfig()": {
        "notice": "Configuration of price changes."
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "purchaseFreeOfCharge(address,uint256)": {
        "notice": "Allows the contract owner to purchase without payment, within the quota enforced by the SellerConfig."
      },
      "sellerConfig()": {
        "notice": "Configuration of purchase limits."
      },
      "setAuctionConfig((uint256,uint256,uint256,uint256,uint248,uint8),uint256)": {
        "notice": "Sets the auction config."
      },
      "setAuctionStartPoint(uint256)": {
        "notice": "Sets the config startPoint. A startPoint of zero disables the auction."
      },
      "setBeneficiary(address)": {
        "notice": "Sets the recipient of revenues."
      },
      "setSellerConfig((uint256,uint256,uint256,uint248,bool,bool,bool))": {
        "notice": "Sets the seller config."
      },
      "totalSold()": {
        "notice": "Returns the total number of items sold by this contract."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3619,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3623,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3625,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3630,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)3611_storage)"
      },
      {
        "astId": 3635,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)3616_storage)"
      },
      {
        "astId": 3639,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3645,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4575,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 946,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1502,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_paused",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1587,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1080,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_totalShares",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1082,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1086,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_shares",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1090,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_released",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1093,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_payees",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1098,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_contract(IERC20)1694,t_uint256)"
      },
      {
        "astId": 1105,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_contract(IERC20)1694,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3233,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "baseUri",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 3236,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "teamWallet",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 3238,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "supply",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3240,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "max",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3243,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "extension",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      },
      {
        "astId": 3245,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "startingIndex",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 3247,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "price",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3249,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "isSaleActive",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 3255,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_addresses",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3261,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_shares",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3265,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "mintCount",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5672,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "whitelist",
        "offset": 0,
        "slot": "28",
        "type": "t_bytes32"
      },
      {
        "astId": 5674,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "freeClaim",
        "offset": 0,
        "slot": "29",
        "type": "t_bytes32"
      },
      {
        "astId": 258,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "sellerConfig",
        "offset": 0,
        "slot": "30",
        "type": "t_struct(SellerConfig)237_storage"
      },
      {
        "astId": 338,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "beneficiary",
        "offset": 0,
        "slot": "35",
        "type": "t_address_payable"
      },
      {
        "astId": 373,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_totalSold",
        "offset": 0,
        "slot": "36",
        "type": "t_struct(Increaser)842_storage"
      },
      {
        "astId": 389,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "_bought",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 453,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "purchasedFreeOfCharge",
        "offset": 0,
        "slot": "38",
        "type": "t_struct(Increaser)842_storage"
      },
      {
        "astId": 52,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "dutchAuctionConfig",
        "offset": 0,
        "slot": "39",
        "type": "t_struct(DutchAuctionConfig)20_storage"
      },
      {
        "astId": 2860,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "isFreeClaimActive",
        "offset": 0,
        "slot": "44",
        "type": "t_bool"
      },
      {
        "astId": 2864,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "whitelistCount",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2866,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "isWhitelistActive",
        "offset": 0,
        "slot": "46",
        "type": "t_bool"
      },
      {
        "astId": 2870,
        "contract": "contracts/NFTcontract.sol:NFTContract",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1694": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionIntervalUnit)24": {
        "encoding": "inplace",
        "label": "enum LinearDutchAuction.AuctionIntervalUnit",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)3616_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)3616_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1694,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1694",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)1694,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1694",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)3611_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)3611_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)3616_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 3613,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3615,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DutchAuctionConfig)20_storage": {
        "encoding": "inplace",
        "label": "struct LinearDutchAuction.DutchAuctionConfig",
        "members": [
          {
            "astId": 8,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "startPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "startPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "decreaseInterval",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "decreaseSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "numDecreases",
            "offset": 0,
            "slot": "4",
            "type": "t_uint248"
          },
          {
            "astId": 19,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "unit",
            "offset": 31,
            "slot": "4",
            "type": "t_enum(AuctionIntervalUnit)24"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Increaser)842_storage": {
        "encoding": "inplace",
        "label": "struct Monotonic.Increaser",
        "members": [
          {
            "astId": 841,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SellerConfig)237_storage": {
        "encoding": "inplace",
        "label": "struct Seller.SellerConfig",
        "members": [
          {
            "astId": 224,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "totalInventory",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 226,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "maxPerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 228,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "maxPerTx",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 230,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "freeQuota",
            "offset": 0,
            "slot": "3",
            "type": "t_uint248"
          },
          {
            "astId": 232,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "reserveFreeQuota",
            "offset": 31,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 234,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "lockFreeQuota",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 236,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "lockTotalInventory",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenOwnership)3611_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 3608,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3610,
            "contract": "contracts/NFTcontract.sol:NFTContract",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}